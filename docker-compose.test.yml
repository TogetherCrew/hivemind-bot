---

services:
  app:
    build:
      context: .
      target: test
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - MONGODB_HOST=mongo
      - MONGODB_PORT=27017
      - MONGODB_USER=root
      - MONGODB_PASS=pass
      - TRACELOOP_BASE_URL=some_url
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=root
      - POSTGRES_PASS=pass
      - POSTGRES_PORT=5432
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
      - RABBIT_USER=root
      - RABBIT_PASSWORD=pass
      - CHUNK_SIZE=512
      - EMBEDDING_DIM=1024
      - K1_RETRIEVER_SEARCH=20
      - K2_RETRIEVER_SEARCH=5
      - D_RETRIEVER_SEARCH=7
      - COHERE_API_KEY=some_credentials
      - OPENAI_API_KEY=some_credentials2
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=
    volumes:
      - ./coverage:/project/coverage
    depends_on:
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant-healthcheck:
        condition: service_healthy

  mongo:
    image: "mongo:6.0.8"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=pass
    healthcheck:
      test: echo 'db.stats().ok' | mongosh localhost:27017/test --quiet
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
  postgres:
    image: "ankane/pgvector"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=pass
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=pass
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 2
      start_period: 40s
  qdrant:
    image: qdrant/qdrant:v1.9.2
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
    expose:
      - 6333
    volumes:
      - ./qdrant_data:/qdrant_data
  qdrant-healthcheck:
    restart: always
    image: curlimages/curl:latest
    entrypoint:
      [
        "/bin/sh",
        "-c",
        "--",
        "while true; do sleep 30; done;"
      ]
    depends_on:
      - qdrant
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://qdrant:6333/readyz" ]
      interval: 10s
      timeout: 2s
      retries: 5
